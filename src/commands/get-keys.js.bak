/* eslint new-cap: 0, max-depth: 0 */
const {Command, flags} = require('@oclif/command')
const {red, white} = require('kleur')
const ora = require('ora')
const validateQrlAddress = require('@theqrl/validate-qrl-address')
const fs = require('fs')
const aes256 = require('aes256')
const {cli} = require('cli-ux')

let {qrlClient,
  checkProtoHash,
  loadGrpcBaseProto,
  loadGrpcProto} = require('../functions/grpc')

const openWalletFile = function (path) {
  const contents = fs.readFileSync(path)
  return JSON.parse(contents)[0]
}

class EphemeralKeys extends Command {
  async run() {
    const {args, flags} = this.parse(EphemeralKeys)

    // get the address from args passed as input
    let address = args.address

    let exitCode = 1 // eslint-disable-line no-unused-vars
    //const spinner = ora({text: 'Reading Address...\n'}).start()

    let itemPerPage = args.item_per_page
    let pageNumber = args.page_number

    if (!validateQrlAddress.hexString(address).result) {
      // not a valid address - is it a file?
      let isFile = false
      let isValidFile = false
      const path = address
      console.log('\npath' + path)
      try {
        if (fs.existsSync(path)) {
          isFile = true
          this.log(`Wallet File found: ${path}\nFetching Ephemeral Keys from API...\n`)
          //spinner.start('Opeing the wallet file...')
        }
      } catch (error) {
        this.log(`${red('⨉')} Error: Unable to get keys: Something went wrong\n` + error)
        this.exit(1)
      }
      if (isFile === false) {
        this.log(`${red('⨉')} Unable to get keys: invalid QRL address or wallet file`)
        this.exit(1)
      } else {
        const walletJson = openWalletFile(path)
        try {
          if (walletJson.encrypted === false) {
            isValidFile = true
            address = walletJson.address
            console.log('address: ' + address)
          }
          if (walletJson.encrypted === true) {
            let password = ''
            if (flags.password) {
              password = flags.password
            } else {
              password = await cli.prompt('Enter password for wallet file', {type: 'hide'})
            }
            address = aes256.decrypt(password, walletJson.address)
            if (validateQrlAddress.hexString(address).result) {
              isValidFile = true
            } else {
              this.log(`${red('⨉')} Unable to open wallet file: invalid password`)
              this.exit(1)
            }
          }
        } catch (error) {
          this.exit(1)
        }
      }
      if (isValidFile === false) {
        this.log(`${red('⨉')} Unable to get keys: invalid QRL address/wallet file`)
        this.exit(1)
      }
    }
    // Select network based on flags set by user. If none given, default to mainnet
    let grpcEndpoint = 'mainnet-1.automated.theqrl.org:19009'
    let network = 'Mainnet'
    if (flags.grpc) {
      grpcEndpoint = flags.grpc
      network = `Custom GRPC endpoint: [${flags.grpc}]`
    }
    if (flags.devnet) {
      grpcEndpoint = 'devnet-1.automated.theqrl.org:19009'
      network = 'Devnet'
    }
    if (flags.testnet) {
      grpcEndpoint = 'testnet-1.automated.theqrl.org:19009'
      network = 'Testnet'
    }
    if (flags.mainnet) {
      grpcEndpoint = 'mainnet-1.automated.theqrl.org:19009'
      network = 'Mainnet'
    }
    this.log(white().bgBlue(network))

    const spinner = ora({
      text: 'Fetching Ephemeral keys from API...\n',
    }).start()

    const proto = await loadGrpcBaseProto(grpcEndpoint)
    spinner.succeed(proto)

    checkProtoHash(proto).then(async protoHash => {
      if (!protoHash) {
        this.log(`${red('⨉')} Unable to validate .proto file from node`)
        this.exit(1)
      }
      // next load GRPC object and check hash of that too
      await loadGrpcProto(proto, grpcEndpoint)

      // const getAddressStateReq = {
      //   address: Buffer.from(address.substring(1), 'hex'),
      //   // eslint-disable-next-line camelcase
      //   exclude_ots_bitfield: true,
      //   // eslint-disable-next-line camelcase
      //   exclude_transaction_hashes: true,
      // }

      // await qrlClient.GetAddressState(
      //   getAddressStateReq,
      //   async (error, response) => {
      //     if (error) {
      //       this.log(`${red('⨉')} Unable to get Lattice transaction list`)
      //     }
      //     // let pk3st = Buffer.from( response.lattice_pks_detail[0].pk3, 'hex' )
      //     spinner.succeed(`RESPONSE: ${ response.state.lattice_pk_count }`)
      //     spinner.succeed('DONE')
      //   }
      // )

      const getTransactionsByAddressReq = {
        address: Buffer.from(address.substring(1), 'hex'),
        // eslint-disable-next-line camelcase
        item_per_page: itemPerPage,
        // eslint-disable-next-line camelcase
        page_number: pageNumber,
      }
      await qrlClient.GetLatticePKsByAddress(
        getTransactionsByAddressReq,
        async (error, response) => {
          if (error) {
            this.log(`${red('⨉')} Unable to get Lattice transaction list`)
          }
          // let pk3st = Buffer.from( response.lattice_pks_detail[0].pk2, 'hex' )
          spinner.succeed(`RESPONSE: ${response.lattice_pks_detail}`)
          spinner.succeed('DONE')
        }
      )
    })
  }
}

EphemeralKeys.description = `Get Lattice keys associated to a QRL address

Reports Lattice keys from the node queried for the address given. You must provide (address), (item_per_page), and (page_number) for lookup.

You can select either (-m) mainnet, (-t) testnet or (-d) devnet
Advanced: you can use a custom defined node to query for status. Use the (-g) grpc endpoint.
`


EphemeralKeys.args = [
  {
    name: 'address',
    description: 'address to return OTS state for',
    required: true,
  },
  {
    name: 'item_per_page',
    description: 'number of items to show per page',
    required: true,
  },
  {
    name: 'page_number',
    description: 'page number to retrieve',
    required: true,
  },
]

EphemeralKeys.flags = {
//  address: flags.string({char: 'a', required: true, description: 'address to query'}),
//  itemCount: flags.string({char: 'c', required: true, description: 'count of items to count'}),
//  pageNumber: flags.string({char: 'n', required: true, description: 'Pages'}),
  testnet: flags.boolean({char: 't', default: false, description: 'queries testnet for the OTS state'}),
  mainnet: flags.boolean({char: 'm', default: false, description: 'queries mainnet for the OTS state'}),
  devnet: flags.boolean({char: 'd', default: false, description: 'queries devnet for the OTS state'}),
  grpc: flags.string({char: 'g', required: false, description: 'advanced: grcp endpoint (for devnet/custom QRL network deployments)'}),
  password: flags.string({char: 'p', required: false, description: 'wallet file password'}),
}

module.exports = {EphemeralKeys}
